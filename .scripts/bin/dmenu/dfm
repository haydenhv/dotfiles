#!/bin/bash
#
# dfm - Hayden's Dmenu File Manager
# Created by Hayden Hamilton
#
# haydenvh.com
# Copyright (c) 2019 Hayden Hamilton.
#

if [ "$(echo $1 | awk '/help/ {print}')" != "" ]
then
	echo "dfm [fm for standard mode/name of program for file-selection] [/path/to/dir - enter at start]

$(tput bold)CONFIG:$(tput sgr0)
DFM_CONF_DIR=[insert /path/to/confdir] <-- Default: $HOME/.config/dfm
DFM_DOT=[0/1 to show dotfiles] <-- Default: 1
DFM_USE_HH_PATCH=[0/1 to use the patched dmenu from haydenvh.com] <-- Default: 0
DFM_DISABLE_ENQUEUE=[0/1 to never enqueue input] <-- Default: 0
DFM_SCREENSHOT_CMD=\"[insert program name]\" <-- Default: \"maim -s\"
DFM_CLIPBOARD_TYPE=\"[PRIMARY/CLIPBOARD/CUSTOM]\" <-- Default: \"PRIMARY\"
DFM_CLIPBOARD_CUSTOM=\"[insert program for clipboard]\" <-- Default: \"xclip\"

$(tput bold)CONFIGURING COMMANDS FOR FILE TYPES:$(tput sgr0) Syntax
	DFM_FILETYPE_[insert filetype in all caps]=\"[insert program name]\"
			^ For example, .mkv is MKV	^ For example mpv
When in standard file management mode, you will now get the option to automatically select a program to launch.

Written by Hayden Hamilton <haydenvh.com>"
	exit 0
fi
forn1="$1"
lsforce="$3"
[ "$1" == "" ] && export forn1="fm"

getconf(){
	dmenu="dmenu"
	DFM_SCREENSHOT_CMD="maim -s"
	DFM_CONF_DIR="$HOME/.config/dfm"
	DFM_CLIPBOARD_CUSTOM="xclip"
	DFM_CLIPBOARD_TYPE="PRIMARY"
	. $HOME/.dmenurc
	. $HOME/.config/dfm/config
	[ "$DFM_USE_HH_PATCH" == "1" ] && dmenu="$dmenu -c -w 1000"

	case "$DFM_CLIPBOARD_TYPE" in
		PRIMARY) clipboard="xclip" ;;
		CLIPBOARD) clipboard="xclip -selection clipboard" ;;
		CUSTOM) clipboard="$DFM_CLIPBOARD_CUSTOM" ;;
	esac
	[ "$DFM_CLIPBOARD_TYPE" = "" ] && clipboard="xclip"

	confdir="$DFM_CONF_DIR"
	conffile="$confdir/config"
}

makeconfdir(){
	[ ! -d $confdir ] && mkdir -p $confdir
	[ ! -f $conffile ] && touch $conffile
}

sendconf(){
	varname="$1"
	varcont="$2"
	makeconfdir
	[ -f $conffile ] && sed -i "/${varname}/d" $conffile
	echo "${varname}=\"${varcont}\"" >> $conffile
	. $conffile
}

fmornorm(){
	[ "$forn1" == "fm" ] && {
		output2=$(echo "$fmcmd2" | $dmenu -l 30 -i -p "Select command:")
		fmspecial
	} || {
		dooutput
		[ "$doarg" == "true" ] && {
			echo $forn1
			$forn1 $argu
			argu=""
		};
	};
}

dooutput(){
	[ "$DFM_DISABLE_ENQUEUE" != "1" ] && enqueue=$(echo "DO ENQUEUE" | tr " " "\n" | $dmenu -i -p "What do you want to do?")
	[ "$enqueue" == "ENQUEUE" ] && {
		argu+="$(pwd)/$output "
		doarg="false"
	} || {
		argu+="$(pwd)/$output "
		doarg="true"
	};
}

getdot(){
	[ "$lsforce" != "" ] && {
		lscommand="$lsforce"
	} || [ "$DFM_DOT" == "1" ] && {
		lscommand="ls -A"
	} || [ "$DFM_DOT" == "0" ] && {
		lscommand="ls"
	} || {
		lscommand="ls -A"
	};
}

getprog(){
	varout=$(echo "$1" | sed 's/\./ /g' | tr '[:lower:]' '[:upper:]' | awk '// {print $NF}' | sed 's/^/DFM_FILETYPE_/g')
	commandout=${!varout}
}

send0x0(){
	send=$(curl -F "file=@$output" https://0x0.st)
	send2=$(echo "$send" | awk '/http/')
	[ "$send2" == "" ] && echo "Failed" | $dmenu -i -p "Hit enter to continue"
	[ "$send2" != "" ] && echo $send | $dmenu -i -p "Hit enter to continue" | $clipboard
}

sendscrn0x0(){
	output="/tmp/ss"
	$DFM_SCREENSHOT_CMD > /tmp/ss && send0x0
}

fmspecial(){
	case "$output2" in
		"AUTO - Check config for program to use")
			getprog "$output"
			[ "$commandout" != "" ] && $commandout $output $argu
			[ "$commandout" == "" ] && echo "No program set..."
		;;
		"RM - Remove file")
			rm $output
		;;
		"CMD - Specific command")
			output3=$(dmenu_path | $dmenu -i -p "Select program")
			$output3 $output $argu
			argu=""
		;;
		"MV - Move file")
			output3=$(echo "" | $dmenu -i -p "Move to:")
			mv $output $output3
		;;
		"EDIT - Open with $EDITOR")
			$EDITOR $output $argu
			argu=""
		;;
		"QUE - Enqueue")
			argu+="$output "
		;;
		"SND - Send to 0x0.st")
			send0x0
		;;
	esac
}

cd $2
while true
do
	getconf
	getdot
	output=$(echo "FM * .. $($lscommand)" | tr "\n" " " | tr " " "\n" |  $dmenu -l 30 -i -p "Select file/directory:")
	fmcmd1="CCL - CANCEL
MD - Make dir
MF - Make file
BM - Bookmarks
FND - Find
HIDE - Toggle Dotfiles
SCRN - Host screenshot on 0x0.st"
	fmcmd2="AUTO - Check config for program to use
CCL - CANCEL
MV - Move file
RM - Remove file
CMD - Specific command
EDIT - Open with $EDITOR
QUE - Enqueue
SND - Send to 0x0.st"
	[ "$output" == "FM" ] && {
		output=$(echo "$fmcmd1" | $dmenu -l 30 -i -p "Select command:")
		case "$output" in
			"MD - Make dir")
				output2=$(echo "" | $dmenu -i -p "Name dir:")
				mkdir $output2
			;;
			"MF - Make file")
				output2=$(echo "" | $dmenu -i -p "Name file:")
				touch $output2
			;;
			"BM - Bookmarks")
				touch ~/.config/dfm/bookmarks
				output=$(echo "MK DEL $(cat ~/.config/dfm/bookmarks | awk '// {print $1}')" | tr "\n" " " | tr " " "\n" |  $dmenu -l 30 -i -p "Select file/directory:")
				[ "$output" == "MK" ] && {
					output=$(echo "" | $dmenu -i -p "Choose bookmark name(no spaces):")
					output2=$(echo "" | $dmenu -i -p "Choose bookmark path(absolute):")
					echo "$output $output2" >> ~/.config/dfm/bookmarks
				} || [ "$output" == "DEL" ] && {
					output=$(echo "$(cat $confdir/bookmarks | awk '// {print $1}')" | $dmenu -l 30 -i -p "Select bookmark to delete:")
					[ "$(cat $confdir/bookmarks | awk "/$output/ {print"' $1}')" == "$output" ] && sed -i "/$output/d" $confdir/bookmarks
				} || {
					output=$(cat ~/.config/dfm/bookmarks | awk "/$output/"' {print $2}')
					output2=$(echo "$fmcmd2" | $dmenu -l 30 -i -p "Select command:")
					fmspecial
				};
			;;
			"FND - Find")
				output=$(echo "" | $dmenu -i -p "Enter name of file:")
				output2=$(printf "ROOT (Takes a while)\nLOCALLY" | $dmenu -i -p "Find option")
				[ "$(echo $output2 | awk '/ROOT/')" != "" ] && {
					echo "May take a while..."
					output3="/"
				} || {
					output3="."
				};
				output=$(echo "NONE $(find $output3 | grep -i "$output")" | tr " " "\n" | $dmenu -i -l 30 -p "Select file:")
				[ "$output" == "NONE" ] && {
					echo > /dev/null
				} || {
					fmornorm
				};
			;;
			"HIDE - Toggle Dotfiles")
				[ "$DFM_DOT" == "0" ] && {
					export DFM_DOT="1"
					sendconf "DFM_DOT" "1"
				} || [ "$DFM_DOT" == "1" ] && {
					export DFM_DOT="0"
					sendconf "DFM_DOT" "0"
				} || {
					export DFM_DOT="0"
					sendconf "DFM_DOT" "0"
				};
			;;
			"SCRN - Host screenshot on 0x0.st")
				sendscrn0x0
			;;
		esac
	} || [ -d "$output" ] && {
		cd $output
	} || [ "$output" == "exit" ] && {
		exit 1
	} || [ "$output" == "" ] && {
		exit 1
	} || {
		fmornorm
	};
done
